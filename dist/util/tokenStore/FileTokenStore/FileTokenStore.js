"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultFileTokenStoreOptions = exports.FileTokenStore = void 0;
var fs = _interopRequireWildcard(require("fs"));
var path = _interopRequireWildcard(require("path"));
var _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));
var _ = require("../../..");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/*
 * This file is part of WPPConnect.
 *
 * WPPConnect is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * WPPConnect is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with WPPConnect.  If not, see <https://www.gnu.org/licenses/>.
 */
/// <reference types="node" />

const defaultFileTokenStoreOptions = exports.defaultFileTokenStoreOptions = {
  decodeFunction: JSON.parse,
  encodeFunction: JSON.stringify,
  encoding: 'utf8',
  fileExtension: '.data.json',
  path: './tokens'
};
class FileTokenStore {
  options;
  constructor(options = {}) {
    this.options = Object.assign({}, defaultFileTokenStoreOptions, options);
  }

  /**
   * Resolve the path of file
   * @param sessionName Name of session
   * @returns Full path of token file
   */
  resolverPath(sessionName) {
    const filename = (0, _sanitizeFilename.default)(sessionName) + this.options.fileExtension;
    return path.resolve(process.cwd(), path.join(this.options.path, filename));
  }
  async getToken(sessionName) {
    const filePath = this.resolverPath(sessionName);
    if (!fs.existsSync(filePath)) {
      return undefined;
    }
    const text = await fs.promises.readFile(filePath, {
      encoding: this.options.encoding
    }).catch(() => null);
    if (!text) {
      return undefined;
    }
    try {
      return this.options.decodeFunction(text);
    } catch (error) {
      _.logger.debug(error);
      return undefined;
    }
  }
  async setToken(sessionName, tokenData) {
    if (!tokenData) {
      return false;
    }
    if (!fs.existsSync(this.options.path)) {
      await fs.promises.mkdir(this.options.path, {
        recursive: true
      });
    }
    const filePath = this.resolverPath(sessionName);
    try {
      const text = this.options.encodeFunction(tokenData);
      await fs.promises.writeFile(filePath, text, {
        encoding: this.options.encoding
      });
      return true;
    } catch (error) {
      _.logger.debug(error);
      return false;
    }
  }
  async removeToken(sessionName) {
    const filePath = this.resolverPath(sessionName);
    if (!fs.existsSync(filePath)) {
      return false;
    }
    try {
      await fs.promises.unlink(filePath);
      return true;
    } catch (error) {
      _.logger.debug(error);
      return false;
    }
  }
  async listTokens() {
    if (!fs.existsSync(this.options.path)) {
      return [];
    }
    try {
      let files = await fs.promises.readdir(this.options.path);

      // Only sessions with same fileExtension
      files = files.filter(file => file.endsWith(this.options.fileExtension));

      // Return name only
      files = files.map(file => path.basename(file, this.options.fileExtension));
      return files;
    } catch (error) {
      _.logger.debug(error);
      return [];
    }
  }
}
exports.FileTokenStore = FileTokenStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,